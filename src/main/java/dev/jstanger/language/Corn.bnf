{
    parserClass="dev.jstanger.language.parser.CornParser"

    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix="Corn"
    psiImplClassSuffix="Impl"
    psiPackage="dev.jstanger.language.psi"
    psiImplPackage="dev.jstanger.language.psi.impl"

    elementTypeHolderClass="dev.jstanger.language.psi.CornTypes"
    elementTypeClass="dev.jstanger.language.psi.CornElementType"
    tokenTypeClass="dev.jstanger.language.psi.CornTokenType"

    psiImplUtilClass="dev.jstanger.language.psi.impl.CornPsiImplUtil"

    tokens = [
        space = "regexp:\s*"
        comment = "regexp://.*"

        LET="let"
        IN="in"
        TRUE="true"
        FALSE="false"
        NULL="null"

        path_seg = "regexp:[^=.\s]+"
        char = 'regexp:[^"\\]|\\.'
        input_token = "regexp:\$[a-zA-Z_][a-zA-Z0-9_]*"
        float = "regexp:-?[0-9]+\.[0-9]+(e[+\-][0-9]+)?"
        hex_integer="regexp:0x[0-9a-fA-F]+"
        integer = "regexp:-?[0-9]+(_?[0-9]+)*"

        OP_EQ="="
        LEFT_BRACE="{"
        RIGHT_BRACE="}"
        LEFT_BRACKET="["
        RIGHT_BRACKET="]"
        DOUBLE_QUOTE="\""
        DOT="."
        DOTDOT=".."
    ]
}

config ::= assign_block? object

assign_block ::= LET LEFT_BRACE { assignment }* RIGHT_BRACE IN {
    methods=[getPresentation]
}

assignment ::= input OP_EQ value { methods=[getInputName] }

object ::= LEFT_BRACE object_value* RIGHT_BRACE
object_value ::= pair | spread {
    pin=1
    recoverWhile=object_value_recover
}
private object_value_recover ::= !(object_value | RIGHT_BRACE )

pair ::= path OP_EQ value {
    methods=[getName getPresentation]
}

path ::= path_seg ( DOT path_seg )* {
    methods=[getName getPresentation]
}

value ::= object | array | input | string | float | integer | boolean | NULL {
    methods=[getName getPresentation]
}

input ::= input_token {
    mixin="dev.jstanger.language.psi.impl.CornNamedElementImpl"
    implements="dev.jstanger.language.psi.CornNamedElement"
    methods=[getName setName getNameIdentifier getPresentation]
}

array ::= LEFT_BRACKET array_value* RIGHT_BRACKET
array_value ::= value | spread

boolean ::= TRUE | FALSE

string ::= DOUBLE_QUOTE string_val* DOUBLE_QUOTE
private string_val ::= char | input

spread ::= DOTDOT input