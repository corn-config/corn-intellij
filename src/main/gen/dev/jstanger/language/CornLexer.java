// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Corn.flex

package dev.jstanger.language;

import com.intellij.psi.tree.IElementType;
import com.intellij.lexer.FlexLexer;
import java.util.Deque;
import java.util.ArrayDeque;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static dev.jstanger.language.psi.CornTypes.*;


public class CornLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int ASSIGN_BLOCK_STATE = 2;
  public static final int OBJECT_STATE = 4;
  public static final int VALUE_STATE = 6;
  public static final int ARRAY_STATE = 8;
  public static final int STRING_STATE = 10;
  public static final int QUOTED_PATH_STATE = 12;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6, 6
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\17\u0100\1\u0400\247\u0100"+
    "\10\u0500\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\4\2\22\0\1\1\1\0\1\3\1\0"+
    "\1\4\2\0\1\5\3\0\1\6\1\0\1\7\1\10"+
    "\1\11\1\12\11\13\3\0\1\14\3\0\6\15\24\16"+
    "\1\17\1\20\1\21\1\0\1\22\1\0\1\23\3\15"+
    "\1\24\1\25\2\16\1\26\2\16\1\27\1\16\1\30"+
    "\3\16\1\31\1\32\1\33\1\34\2\16\1\35\2\16"+
    "\1\36\1\0\1\37\7\0\1\40\32\0\1\41\u01df\0"+
    "\1\41\177\0\13\41\35\0\2\40\5\0\1\41\57\0"+
    "\1\41\240\0\1\41\377\0\u0100\42";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\7\0\1\1\1\2\2\1\1\3\1\1\1\4\1\1"+
    "\1\5\1\6\1\7\1\10\1\11\1\7\1\12\1\13"+
    "\2\1\2\14\1\15\1\16\3\1\1\17\1\20\2\1"+
    "\2\21\1\22\3\1\1\23\1\24\2\25\1\26\1\27"+
    "\1\26\1\30\1\0\1\31\1\32\1\33\1\7\1\34"+
    "\15\0\1\35\1\36\2\14\3\0\1\37\2\21\5\0"+
    "\1\40\1\41\2\0\1\42\1\43\1\0\1\44\1\0"+
    "\1\45\1\36\1\37";

  private static int [] zzUnpackAction() {
    int [] result = new int[96];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\43\0\106\0\151\0\214\0\257\0\322\0\365"+
    "\0\u0118\0\u013b\0\u015e\0\365\0\u0181\0\365\0\u01a4\0\365"+
    "\0\365\0\u01c7\0\365\0\u01ea\0\u020d\0\365\0\365\0\u0230"+
    "\0\u0253\0\u0276\0\u0299\0\365\0\365\0\u02bc\0\u02df\0\u0302"+
    "\0\365\0\365\0\u0325\0\u01ea\0\u0348\0\u036b\0\365\0\u038e"+
    "\0\u03b1\0\u03d4\0\u03f7\0\365\0\u0181\0\u041a\0\u043d\0\365"+
    "\0\u0460\0\u0483\0\u04a6\0\u04c9\0\365\0\365\0\u04ec\0\u050f"+
    "\0\u0532\0\u0555\0\u0578\0\u059b\0\u05be\0\u05e1\0\u0604\0\u0627"+
    "\0\u064a\0\u066d\0\u0690\0\u06b3\0\u041a\0\365\0\u06d6\0\u06f9"+
    "\0\u0578\0\u071c\0\u073f\0\u0762\0\u0785\0\u07a8\0\u064a\0\u07cb"+
    "\0\u07ee\0\u0811\0\u0834\0\u0857\0\365\0\365\0\u087a\0\u089d"+
    "\0\365\0\365\0\u08c0\0\365\0\u08e3\0\365\0\u08c0\0\u08e3";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[96];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\10\2\11\6\10\1\12\15\10\1\13\6\10\1\14"+
    "\5\10\2\11\1\10\1\15\4\10\1\12\2\10\1\16"+
    "\11\10\1\17\7\10\1\20\1\21\3\10\1\22\2\11"+
    "\1\10\1\15\1\23\1\22\1\10\1\24\1\25\2\22"+
    "\1\16\2\22\1\10\1\22\1\10\14\22\1\10\1\26"+
    "\2\10\1\22\1\10\2\11\1\27\1\30\2\10\1\31"+
    "\1\10\1\12\1\32\1\33\3\10\1\34\1\10\1\35"+
    "\3\10\1\36\2\10\1\37\2\10\1\40\2\10\1\41"+
    "\5\10\2\11\1\42\1\15\2\10\1\43\1\44\1\12"+
    "\1\45\1\46\3\10\1\47\1\10\1\35\3\10\1\50"+
    "\2\10\1\51\2\10\1\52\2\10\1\14\4\10\3\53"+
    "\1\54\1\55\13\53\1\56\22\53\5\57\1\60\12\57"+
    "\1\61\22\57\44\0\2\11\51\0\1\62\55\0\1\63"+
    "\33\0\2\64\3\0\14\64\35\0\1\65\12\0\1\22"+
    "\2\0\5\22\1\0\3\22\1\0\23\22\2\0\1\22"+
    "\10\0\1\66\32\0\1\22\2\0\5\22\1\0\1\67"+
    "\2\22\1\0\23\22\2\0\1\22\15\0\2\70\3\0"+
    "\14\70\17\0\2\33\37\0\1\71\1\0\2\33\6\0"+
    "\1\72\12\0\1\73\15\0\1\71\1\0\2\33\6\0"+
    "\1\72\43\0\1\74\53\0\1\75\37\0\1\76\23\0"+
    "\2\46\37\0\1\77\1\0\2\46\6\0\1\100\12\0"+
    "\1\101\15\0\1\77\1\0\2\46\6\0\1\100\43\0"+
    "\1\102\53\0\1\103\37\0\1\104\11\0\3\53\2\0"+
    "\13\53\1\105\24\53\1\0\35\53\1\0\1\53\1\0"+
    "\5\57\1\0\12\57\1\61\42\57\1\61\22\57\2\62"+
    "\1\0\35\62\1\0\1\62\34\0\1\106\21\0\2\64"+
    "\1\0\2\64\3\0\14\64\5\0\1\67\1\62\1\0"+
    "\5\67\1\62\3\67\1\62\23\67\1\0\1\62\1\22"+
    "\12\0\2\70\1\0\2\70\3\0\14\70\17\0\2\107"+
    "\41\0\2\110\41\0\2\111\1\0\1\111\5\0\3\111"+
    "\44\0\1\112\42\0\1\113\47\0\1\114\20\0\2\115"+
    "\41\0\2\116\41\0\2\117\1\0\1\117\5\0\3\117"+
    "\44\0\1\120\42\0\1\121\47\0\1\122\20\0\2\107"+
    "\10\0\1\123\30\0\2\110\6\0\1\72\52\0\1\124"+
    "\37\0\1\125\37\0\1\126\30\0\2\115\10\0\1\127"+
    "\30\0\2\116\6\0\1\100\52\0\1\130\37\0\1\131"+
    "\37\0\1\132\24\0\2\133\57\0\1\134\24\0\2\135"+
    "\57\0\1\136\30\0\2\137\41\0\2\140\27\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[2310];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\7\0\1\11\3\1\1\11\1\1\1\11\1\1\2\11"+
    "\1\1\1\11\2\1\2\11\4\1\2\11\3\1\2\11"+
    "\4\1\1\11\4\1\1\11\3\1\1\11\2\1\1\0"+
    "\1\1\2\11\2\1\15\0\1\11\3\1\3\0\3\1"+
    "\5\0\2\11\2\0\2\11\1\0\1\11\1\0\1\11"+
    "\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[96];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /* user code: */
  public CornLexer() {
    this((java.io.Reader)null);
  }
    Deque<Integer> stateStack = new ArrayDeque<>();

    private void pushState(int state) {
        stateStack.push(state);
        yybegin(state);
    }

    private void popState() {
        if(!stateStack.isEmpty()) stateStack.pop();

        var newState = stateStack.peekFirst();
        if(newState == null) newState = YYINITIAL;

        yybegin(newState);
    }

    private void replaceState(int newState) {
        popState();
        pushState(newState);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public CornLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return BAD_CHARACTER;
            }
          // fall through
          case 38: break;
          case 2:
            { return WHITE_SPACE;
            }
          // fall through
          case 39: break;
          case 3:
            { pushState(OBJECT_STATE); return LEFT_BRACE;
            }
          // fall through
          case 40: break;
          case 4:
            { pushState(VALUE_STATE); return OP_EQ;
            }
          // fall through
          case 41: break;
          case 5:
            { return LEFT_BRACE;
            }
          // fall through
          case 42: break;
          case 6:
            { return RIGHT_BRACE;
            }
          // fall through
          case 43: break;
          case 7:
            { return PATH_SEG;
            }
          // fall through
          case 44: break;
          case 8:
            { pushState(QUOTED_PATH_STATE); return SINGLE_QUOTE;
            }
          // fall through
          case 45: break;
          case 9:
            { return DOT;
            }
          // fall through
          case 46: break;
          case 10:
            { popState(); return RIGHT_BRACE;
            }
          // fall through
          case 47: break;
          case 11:
            { replaceState(STRING_STATE); return DOUBLE_QUOTE;
            }
          // fall through
          case 48: break;
          case 12:
            { popState(); return INTEGER;
            }
          // fall through
          case 49: break;
          case 13:
            { replaceState(ARRAY_STATE); return LEFT_BRACKET;
            }
          // fall through
          case 50: break;
          case 14:
            { popState(); return RIGHT_BRACKET;
            }
          // fall through
          case 51: break;
          case 15:
            { replaceState(OBJECT_STATE); return LEFT_BRACE;
            }
          // fall through
          case 52: break;
          case 16:
            { pushState(STRING_STATE); return DOUBLE_QUOTE;
            }
          // fall through
          case 53: break;
          case 17:
            { return INTEGER;
            }
          // fall through
          case 54: break;
          case 18:
            { pushState(ARRAY_STATE); return LEFT_BRACKET;
            }
          // fall through
          case 55: break;
          case 19:
            { return CHAR_SEQ;
            }
          // fall through
          case 56: break;
          case 20:
            { popState(); return DOUBLE_QUOTE;
            }
          // fall through
          case 57: break;
          case 21:
            { popState(); return BAD_CHARACTER;
            }
          // fall through
          case 58: break;
          case 22:
            { return QUOTED_PATH_SEQ;
            }
          // fall through
          case 59: break;
          case 23:
            { popState(); return SINGLE_QUOTE;
            }
          // fall through
          case 60: break;
          case 24:
            { return COMMENT;
            }
          // fall through
          case 61: break;
          case 25:
            { return INPUT_TOKEN;
            }
          // fall through
          case 62: break;
          case 26:
            { popState(); return IN;
            }
          // fall through
          case 63: break;
          case 27:
            { return DOTDOT;
            }
          // fall through
          case 64: break;
          case 28:
            { popState(); return INPUT_TOKEN;
            }
          // fall through
          case 65: break;
          case 29:
            { pushState(ASSIGN_BLOCK_STATE); return LET;
            }
          // fall through
          case 66: break;
          case 30:
            { popState(); return FLOAT;
            }
          // fall through
          case 67: break;
          case 31:
            { return FLOAT;
            }
          // fall through
          case 68: break;
          case 32:
            { popState(); return NULL;
            }
          // fall through
          case 69: break;
          case 33:
            { popState(); return TRUE;
            }
          // fall through
          case 70: break;
          case 34:
            { return NULL;
            }
          // fall through
          case 71: break;
          case 35:
            { return TRUE;
            }
          // fall through
          case 72: break;
          case 36:
            { popState(); return FALSE;
            }
          // fall through
          case 73: break;
          case 37:
            { return FALSE;
            }
          // fall through
          case 74: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
