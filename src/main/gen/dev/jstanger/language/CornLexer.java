/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package dev.jstanger.language;

import com.intellij.psi.tree.IElementType;
import com.intellij.lexer.FlexLexer;
import java.util.Deque;
import java.util.ArrayDeque;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static dev.jstanger.language.psi.CornTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Corn.flex</tt>
 */
public class CornLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int ASSIGN_BLOCK_STATE = 2;
  public static final int OBJECT_STATE = 4;
  public static final int VALUE_STATE = 6;
  public static final int ARRAY_STATE = 8;
  public static final int STRING_STATE = 10;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5, 5
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1928 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\237\2");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\1\4\3\22\0\1\1\1\0\1\23\1\0\1\7\6\0\1\15\1\0\1\12\1\13\1\2\1\16\11"+
    "\11\3\0\1\32\3\0\6\20\24\10\1\33\1\22\1\5\1\0\1\21\1\0\1\37\3\20\1\14\1\36"+
    "\2\10\1\27\2\10\1\24\1\10\1\30\3\10\1\34\1\40\1\25\1\35\2\10\1\17\2\10\1\26"+
    "\1\0\1\31\7\0\1\4\32\0\1\6\337\0\1\6\177\0\13\6\35\0\2\4\5\0\1\6\57\0\1\6"+
    "\40\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\1\1\1\2\2\1\1\3\1\1\1\4\1\1"+
    "\1\5\1\6\2\7\1\10\1\11\1\12\1\1\1\13"+
    "\1\1\1\13\1\14\1\1\1\15\1\1\1\16\1\1"+
    "\1\17\2\1\1\17\1\20\2\1\1\21\1\1\2\22"+
    "\1\23\1\24\1\25\1\0\1\26\1\27\1\7\1\30"+
    "\1\31\14\0\1\32\1\33\2\13\3\0\1\34\2\17"+
    "\4\0\1\35\1\36\2\0\1\37\1\40\2\0\1\41"+
    "\1\0\1\42\1\33\1\34";

  private static int [] zzUnpackAction() {
    int [] result = new int[90];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\41\0\102\0\143\0\204\0\245\0\306\0\347"+
    "\0\u0108\0\u0129\0\306\0\u014a\0\306\0\u016b\0\306\0\306"+
    "\0\u018c\0\u01ad\0\u01ce\0\306\0\306\0\u01ef\0\u0210\0\u0231"+
    "\0\u0252\0\306\0\u0273\0\306\0\u0294\0\306\0\u02b5\0\u02d6"+
    "\0\u02f7\0\u01ce\0\u0318\0\306\0\u0339\0\u035a\0\306\0\u037b"+
    "\0\306\0\u014a\0\u039c\0\306\0\u03bd\0\u03de\0\u03ff\0\306"+
    "\0\u0420\0\306\0\u0441\0\u0462\0\u0483\0\u04a4\0\u04c5\0\u04e6"+
    "\0\u0507\0\u0528\0\u0549\0\u056a\0\u058b\0\u05ac\0\u05cd\0\306"+
    "\0\u05ee\0\u060f\0\u04a4\0\u0630\0\u0651\0\u0672\0\u0693\0\u06b4"+
    "\0\u056a\0\u06d5\0\u06f6\0\u0717\0\u0738\0\306\0\306\0\u0759"+
    "\0\u077a\0\306\0\306\0\u079b\0\u07bc\0\306\0\u07dd\0\306"+
    "\0\u07bc\0\u07dd";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[90];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\7\1\10\1\11\1\10\20\7\1\12\1\7\1\13"+
    "\13\7\1\10\1\11\1\10\3\7\1\14\16\7\1\15"+
    "\1\16\1\7\1\17\1\20\6\7\1\21\1\10\1\22"+
    "\1\10\3\7\1\14\2\21\1\7\1\23\7\21\1\7"+
    "\2\21\1\7\2\21\1\24\1\20\1\7\5\21\1\7"+
    "\1\10\1\11\1\10\1\7\1\25\1\7\1\26\1\7"+
    "\1\27\1\30\3\7\1\31\4\7\1\32\1\7\1\33"+
    "\1\34\1\7\1\35\2\7\1\36\2\7\1\37\3\7"+
    "\1\10\1\11\1\10\1\7\1\25\1\7\1\14\1\7"+
    "\1\40\1\41\1\42\2\7\1\43\4\7\1\44\1\7"+
    "\1\45\1\13\1\7\1\46\2\7\1\47\2\7\1\50"+
    "\2\7\7\51\1\52\12\51\1\53\1\54\15\51\42\0"+
    "\1\10\1\0\1\10\37\0\1\55\52\0\1\56\34\0"+
    "\1\57\3\0\1\57\2\0\3\57\2\0\2\57\1\0"+
    "\2\57\3\0\5\57\30\0\1\60\10\0\1\21\1\0"+
    "\1\21\2\0\1\21\1\0\4\21\1\0\16\21\1\0"+
    "\7\21\1\0\1\61\2\0\1\21\1\0\4\21\1\0"+
    "\16\21\1\0\6\21\13\0\1\62\35\0\1\63\3\0"+
    "\1\63\2\0\3\63\2\0\2\63\1\0\2\63\3\0"+
    "\5\63\11\0\1\27\1\0\1\64\2\0\1\27\2\0"+
    "\1\65\30\0\1\27\4\0\1\27\33\0\1\27\1\0"+
    "\1\64\2\0\1\27\1\66\1\0\1\65\53\0\1\67"+
    "\41\0\1\70\42\0\1\71\12\0\1\40\1\0\1\72"+
    "\2\0\1\40\2\0\1\73\30\0\1\40\4\0\1\40"+
    "\33\0\1\40\1\0\1\72\2\0\1\40\1\74\1\0"+
    "\1\73\53\0\1\75\41\0\1\76\42\0\1\77\1\0"+
    "\3\51\2\0\34\51\3\55\2\0\34\55\25\0\1\100"+
    "\23\0\2\57\2\0\1\57\1\0\4\57\2\0\2\57"+
    "\1\0\2\57\3\0\5\57\1\61\1\55\1\61\2\0"+
    "\1\61\1\55\4\61\1\55\16\61\1\55\6\61\10\0"+
    "\2\63\2\0\1\63\1\0\4\63\2\0\2\63\1\0"+
    "\2\63\3\0\5\63\11\0\1\101\4\0\1\101\33\0"+
    "\1\102\4\0\1\102\33\0\1\103\2\0\1\103\1\0"+
    "\1\103\1\0\1\103\15\0\2\103\36\0\1\104\27\0"+
    "\1\105\40\0\1\106\25\0\1\107\4\0\1\107\33\0"+
    "\1\110\4\0\1\110\33\0\1\111\2\0\1\111\1\0"+
    "\1\111\1\0\1\111\15\0\2\111\36\0\1\112\27\0"+
    "\1\113\40\0\1\114\25\0\1\101\2\0\1\115\1\0"+
    "\1\101\33\0\1\102\4\0\1\102\2\0\1\65\33\0"+
    "\1\116\50\0\1\117\54\0\1\120\11\0\1\107\2\0"+
    "\1\121\1\0\1\107\33\0\1\110\4\0\1\110\2\0"+
    "\1\73\33\0\1\122\50\0\1\123\54\0\1\124\12\0"+
    "\1\125\2\0\1\125\37\0\1\126\36\0\1\127\2\0"+
    "\1\127\37\0\1\130\35\0\1\131\4\0\1\131\33\0"+
    "\1\132\4\0\1\132\22\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[2046];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\1\11\3\1\1\11\1\1\1\11\1\1\2\11"+
    "\3\1\2\11\4\1\1\11\1\1\1\11\1\1\1\11"+
    "\5\1\1\11\2\1\1\11\1\1\1\11\2\1\1\11"+
    "\1\1\1\0\1\1\1\11\1\1\1\11\1\1\14\0"+
    "\1\11\3\1\3\0\3\1\4\0\2\11\2\0\2\11"+
    "\2\0\1\11\1\0\1\11\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[90];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public CornLexer() {
    this((java.io.Reader)null);
  }
    Deque<Integer> stateStack = new ArrayDeque<>();

    private void pushState(int state) {
        System.out.println("push state " + state);
        stateStack.push(state);
        yybegin(state);
    }

    private void popState() {
        if(!stateStack.isEmpty()) stateStack.pop();

        var newState = stateStack.peekFirst();
        if(newState == null) newState = YYINITIAL;

        System.out.println("pop state (now " + newState + ")");

        yybegin(newState);
    }

    private void replaceState(int newState) {
        popState();
        pushState(newState);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public CornLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 35: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 36: break;
          case 3: 
            { pushState(OBJECT_STATE); return LEFT_BRACE;
            } 
            // fall through
          case 37: break;
          case 4: 
            { return LEFT_BRACE;
            } 
            // fall through
          case 38: break;
          case 5: 
            { return RIGHT_BRACE;
            } 
            // fall through
          case 39: break;
          case 6: 
            { pushState(VALUE_STATE); return OP_EQ;
            } 
            // fall through
          case 40: break;
          case 7: 
            { return PATH_SEG;
            } 
            // fall through
          case 41: break;
          case 8: 
            { return DOT;
            } 
            // fall through
          case 42: break;
          case 9: 
            { popState(); return RIGHT_BRACE;
            } 
            // fall through
          case 43: break;
          case 10: 
            { popState(); return RIGHT_BRACKET;
            } 
            // fall through
          case 44: break;
          case 11: 
            { popState(); return INTEGER;
            } 
            // fall through
          case 45: break;
          case 12: 
            { replaceState(STRING_STATE); return DOUBLE_QUOTE;
            } 
            // fall through
          case 46: break;
          case 13: 
            { replaceState(OBJECT_STATE); return LEFT_BRACE;
            } 
            // fall through
          case 47: break;
          case 14: 
            { replaceState(ARRAY_STATE); return LEFT_BRACKET;
            } 
            // fall through
          case 48: break;
          case 15: 
            { return INTEGER;
            } 
            // fall through
          case 49: break;
          case 16: 
            { pushState(STRING_STATE); return DOUBLE_QUOTE;
            } 
            // fall through
          case 50: break;
          case 17: 
            { pushState(ARRAY_STATE); return LEFT_BRACKET;
            } 
            // fall through
          case 51: break;
          case 18: 
            { return CHAR;
            } 
            // fall through
          case 52: break;
          case 19: 
            { popState(); return BAD_CHARACTER;
            } 
            // fall through
          case 53: break;
          case 20: 
            { popState(); return DOUBLE_QUOTE;
            } 
            // fall through
          case 54: break;
          case 21: 
            { return COMMENT;
            } 
            // fall through
          case 55: break;
          case 22: 
            { return INPUT_TOKEN;
            } 
            // fall through
          case 56: break;
          case 23: 
            { popState(); return IN;
            } 
            // fall through
          case 57: break;
          case 24: 
            { return DOTDOT;
            } 
            // fall through
          case 58: break;
          case 25: 
            { popState(); return INPUT_TOKEN;
            } 
            // fall through
          case 59: break;
          case 26: 
            { pushState(ASSIGN_BLOCK_STATE); return LET;
            } 
            // fall through
          case 60: break;
          case 27: 
            { popState(); return FLOAT;
            } 
            // fall through
          case 61: break;
          case 28: 
            { return FLOAT;
            } 
            // fall through
          case 62: break;
          case 29: 
            { popState(); return TRUE;
            } 
            // fall through
          case 63: break;
          case 30: 
            { popState(); return NULL;
            } 
            // fall through
          case 64: break;
          case 31: 
            { return TRUE;
            } 
            // fall through
          case 65: break;
          case 32: 
            { return NULL;
            } 
            // fall through
          case 66: break;
          case 33: 
            { popState(); return FALSE;
            } 
            // fall through
          case 67: break;
          case 34: 
            { return FALSE;
            } 
            // fall through
          case 68: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
